// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Admin {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String
  password   String
  gender     Gender
  profileImg String? @db.Text
  address    String? @db.Text

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Donor {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String
  password   String
  gender     Gender
  profileImg String? @db.Text
  address    String? @db.Text

  donatedItems DonatedItem[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Organisation {
  id             Int            @id @default(autoincrement())
  name           String
  acronym        String?
  email          String
  password       String
  websiteUrl     String?
  logo           String?        @db.Text
  address        String         @db.Text
  approvalStatus ApprovalStatus @default(pending)

  orders Order[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  key         String @unique
  description String? @db.Text

  donatedItems DonatedItem[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model DonatedItem {
  id             Int            @id @default(autoincrement())
  image          String         @db.Text
  title          String
  description    String?        @db.Text
  quantity       Int
  condition      Condition
  pickupAddress  String?        @db.Text
  approvalStatus ApprovalStatus @default(pending)

  isAvailable Boolean @default(true)

  donorId Int
  donor   Donor @relation(fields: [donorId], references: [id])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  orders Order[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Order {
  id             Int          @id @default(autoincrement())
  organisationId Int
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  donatedItemId  Int
  donatedItem    DonatedItem  @relation(fields: [donatedItemId], references: [id])

  orderStatus OrderStatus
}

enum OrderStatus {
  pending
  processing
  confirmed
  shipped
  delivered
  cancelled
}

enum Condition {
  new
  like_new
  used_good
  used_fair
  used_poor
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum Gender {
  male
  female
  other
}
